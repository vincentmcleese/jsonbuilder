---
description: 
globs: 
alwaysApply: false
---
Understood. I will update the `testingsetup` rule with the key proposals for a cleaner, more robust, and developer-friendly testing strategy. This will serve as a better guide for future projects.

Here is the proposed updated content for your `testingsetup.mdc` rule:

---

**Rule Name: testingsetup**
**Description:**

Comprehensive guide for establishing a stable and developer-friendly Jest testing environment for Next.js 14 (App Router) projects using TypeScript. This setup includes Mock Service Worker (MSW) for API mocking across API route tests (Node.js environment) and frontend component tests (JSDOM environment), emphasizing robustness and maintainability.

**Core Goal:** Achieve stable, clean, and reliable Jest testing that aids development by providing fast feedback and clear behavior documentation.

**I. Foundational Setup (Core Dependencies & Configuration):**

1.  **`package.json` Dependencies:**
    *   **Jest & Core Testing:** `jest@^29.x.x` (e.g., `^29.7.0`), `@types/jest`, `ts-jest`.
    *   **React/DOM Testing:** `@testing-library/react`, `@testing-library/jest-dom`, `@testing-library/user-event` (for realistic user interactions).
    *   **JSDOM Environment:** `jest-environment-jsdom@^29.x.x` (aligned with Jest version), `jest-fixed-jsdom` (crucial for a more stable JSDOM providing necessary globals like `TextEncoder`).
    *   **MSW:** `msw` (e.g., `^2.x.x`).
    *   **Polyfills:** `cross-fetch` (for a reliable Fetch API polyfill in JSDOM).

2.  **`jest.config.js` (Primary Jest Configuration):**
    *   Utilize `next/jest` for base Next.js compatibility.
    *   **`customJestConfig` Highlights:**
        *   `setupFilesAfterEnv: ['<rootDir>/jest.setup.js']`: Points to the global test setup file.
        *   `testEnvironment: 'jest-fixed-jsdom'`: Default environment for component tests, providing a more stable JSDOM.
        *   `resolver: './jest.resolver.js'`: Custom resolver to ensure MSW and its dependencies use Node.js-compatible builds in JSDOM.
        *   `moduleNameMapper`:
            *   `'^@/(.*)$': '<rootDir>/src/$1'` (for `@/` src alias).
            *   Include explicit mappings for MSW internals (`msw/node`, `msw`, `@mswjs/interceptors/*`) derived from their `package.json` "exports" if the custom resolver alone is insufficient. This acts as a robust fallback.
            ```javascript
            // Example msw internal mappings:
            '^msw/node$': '<rootDir>/node_modules/msw/lib/node/index.js',
            '^@mswjs/interceptors/ClientRequest$': '<rootDir>/node_modules/@mswjs/interceptors/lib/node/interceptors/ClientRequest/index.js',
            // etc.
            ```
        *   `preset: 'ts-jest'`: For TypeScript support.

3.  **`jest.resolver.js` (Custom MSW Resolver):**
    *   Located at the project root.
    *   **Purpose:** Intercepts Jest's module resolution for `msw` and `@mswjs/interceptors`. It modifies the "export conditions" to strip "browser" and prefer "node", ensuring MSW's `setupServer` (Node.js build) is used correctly even in the JSDOM environment, preventing issues with missing Node globals in browser-specific builds.
    ```javascript
    // jest.resolver.js
    module.exports = (path, options) => {
      const mswRelatedPattern = new RegExp("^(msw|@mswjs\\\\/interceptors)(\\\\/|$)");
      if (mswRelatedPattern.test(path)) {
        let newConditions = options.conditions.filter(c => c !== 'browser');
        if (!newConditions.includes('node')) {
          newConditions.push('node');
        }
        return options.defaultResolver(path, { ...options, conditions: newConditions });
      }
      return options.defaultResolver(path, options);
    };
    ```

4.  **`jest.setup.js` (Global Test Environment Augmentation):**
    *   **CRITICAL ORDERING:** Polyfills must be applied *before* MSW server initialization.
    ```javascript
    // jest.setup.js

    // 1. Essential JSDOM Globals (very early)
    // For libraries like Radix UI (used by shadcn/ui) and MSW internals.
    import { TextEncoder, TextDecoder } from 'util';
    if (typeof global.TextEncoder === 'undefined') global.TextEncoder = TextEncoder;
    if (typeof global.TextDecoder === 'undefined') global.TextDecoder = TextDecoder;

    if (typeof window !== 'undefined') {
      if (!window.location) { /* ... robust window.location polyfill ... */ }
      else { /* ... ensure window.location.origin/pathname/href are set ... */ }

      if (typeof window.TextEncoder === 'undefined') Object.defineProperty(window, 'TextEncoder', { value: TextEncoder });
      if (typeof window.TextDecoder === 'undefined') Object.defineProperty(window, 'TextDecoder', { value: TextDecoder });
      
      // Polyfills for missing Element.prototype functions in JSDOM affecting user-event
      if (typeof Element.prototype.hasPointerCapture === 'undefined') {
        Element.prototype.hasPointerCapture = function() { return false; };
        Element.prototype.setPointerCapture = function() { /* no-op */ };
        Element.prototype.releasePointerCapture = function() { /* no-op */ };
      }
      if (typeof Element.prototype.scrollIntoView === 'undefined') {
        Element.prototype.scrollIntoView = function() { /* no-op */ };
      }
    }

    // 2. Fetch API Polyfill
    import 'cross-fetch/polyfill'; // Provides reliable fetch, Request, Response, Headers

    // 3. Testing Library DOM extensions
    import '@testing-library/jest-dom';

    // 4. MSW Server Setup
    import { server } from '@/mocks/server'; // Assumes default handlers are in src/mocks/server.ts

    beforeAll(() => server.listen({ onUnhandledRequest: 'error' }));
    afterEach(() => server.resetHandlers()); // Crucial for test isolation
    afterAll(() => server.close());
    ```
    *(Note: The `window.location` polyfill should ensure `href`, `origin`, `pathname`, etc. are set for base URL resolution by `fetch`.)*

5.  **`tsconfig.json`:**
    *   `compilerOptions.types`: Include `"jest"` and `"node"`.
    *   `include`: Ensure test setup files (`jest.config.js`, `jest.setup.js`, `jest.resolver.js`) are included if they are TypeScript files or if needed for editor IntelliSense.

**II. Test Implementation Strategies for Cleanliness & Reliability:**

1.  **Environment-Specific Testing:**
    *   **API Route Tests (`src/app/api/**/*.test.ts`):**
        *   Mandate `/** @jest-environment node */` at the top of these files.
        *   These tests should focus on request/response validation, business logic, and direct interactions with (mocked) services like databases or external APIs (e.g., OpenRouter via `fetch` spy).
    *   **Frontend Component Tests (`*.test.tsx`):**
        *   Will use the default `jest-fixed-jsdom` environment.
        *   Focus on user interactions, component rendering, state changes, and correct data display based on mocked API responses (via MSW).

2.  **MSW Handler Management:**
    *   **Centralized Default Handlers (`src/mocks/handlers.ts`):**
        *   Define common, successful (200 OK) MSW handlers for your API endpoints here.
        *   `src/mocks/server.ts` should use these: `export const server = setupServer(...handlers);`.
    *   **Test-Specific Overrides:** In individual test files or `describe` blocks, use `server.use(...)` to add or override handlers for specific scenarios (e.g., error responses, unique payloads). This keeps tests focused and reduces boilerplate.
        ```typescript
        // Example in a test:
        server.use(
          http.post('/api/my-endpoint', () => {
            return HttpResponse.json({ error: 'Specific error for this test' }, { status: 500 });
          })
        );
        ```

3.  **Interacting with Complex UI Components (e.g., shadcn/ui):**
    *   **Use `@testing-library/user-event`:** Prefer `userEvent` over `fireEvent` for more realistic simulation of user interactions.
    *   **Helper Functions:** Create reusable helper functions for common complex interactions (e.g., selecting an option in a shadcn/ui `Select`).
        ```typescript
        // src/test-utils/interactionHelpers.ts (example)
        import { screen } from '@testing-library/react';
        import userEvent from '@testing-library/user-event';

        export async function selectShadcnOption(selectLabel: RegExp | string, optionText: RegExp | string) {
          const selectTrigger = screen.getByRole('combobox', { name: selectLabel });
          await userEvent.click(selectTrigger);
          const option = await screen.findByRole('option', { name: optionText }); // Waits for option
          await userEvent.click(option);
          // Optional: await waitFor(() => expect(selectTrigger).toHaveTextContent(optionText));
        }
        ```
    *   This abstracts away the multi-step interaction and makes tests more readable.

4.  **Handling Asynchronous Operations and UI Updates:**
    *   **`findBy*` Queries:** Use `await screen.findBy...` queries, which automatically use `waitFor` for elements that appear asynchronously.
    *   **`waitFor` Utility:** For more complex scenarios or multiple assertions that depend on async updates, use `await waitFor(() => { /* assertions */ });`.
    *   **Loading States:**
        *   If loading states are very brief due to fast-resolving mocks, testing them can be tricky.
        *   Current solution: Re-querying the element by its expected loading state text/name *within* a `waitFor` block (`await waitFor(() => { screen.getByRole('button', {name: /Loading.../i}); })`).
        *   If absolutely necessary and pragmatic, a *small, controlled* artificial delay in an MSW handler for a *specific test case* can stabilize loading state assertions, but use sparingly.
        ```typescript
        // Example of testing a brief loading state after a click:
        // const button = screen.getByRole('button', { name: 'Submit' });
        // await userEvent.click(button);
        // await waitFor(() => expect(button).toHaveTextContent(/Submitting.../i));
        // await waitFor(() => expect(button).toHaveTextContent('Submit')); // Back to original
        ```

5.  **Test Organization:**
    *   Use nested `describe` blocks to group related tests (e.g., by feature, by sprint).
    *   Use clear, descriptive test names (`it('should...')`).

**Key Learnings & Troubleshooting Insights Incorporated:**

*   **`jest-fixed-jsdom` + Specific Polyfills:** This combination is crucial for a stable JSDOM that works with modern component libraries and MSW.
*   **Custom Resolver for MSW:** Addresses fundamental module resolution issues for MSW v2+ in Jest/JSDOM.
*   **Order in `jest.setup.js`:** Polyfills *before* MSW initialization.
*   **`PointerEvents` & `scrollIntoView` Mocks:** Necessary for testing UI components that use these browser APIs not fully implemented in JSDOM.
*   **Asynchronous Nature of Tests:** Rigorous use of `async/await`, `findBy*`, and `waitFor` is essential.

---

This updated rule is more prescriptive based on our journey and aims to prevent many of the "test-driven development loops" by establishing a more robust and understandable baseline configuration from the start. It also emphasizes strategies for cleaner test code.
